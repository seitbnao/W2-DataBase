using W2Open.Common.GameStructure;

namespace W2Open.Common.Utility
{
    /// <summary>
    /// Implements the security protocol used in the game client.
    /// </summary>
    public static class PacketSecurity
    {
        /// <summary>
        /// The keys used in the enc/dec process.
        /// </summary>
        private static byte[] keyTable = new byte[512]
{
    0x84, 0x87, 0x37, 0xd7, 0xea, 0x79, 0x91, 0x7d, 0x4b, 0x4b, 0x85, 0x7d, 0x87, 0x81, 0x91, 0x7c, 0x0f, 0x73, 0x91, 0x91, 0x87, 0x7d, 0x0d, 0x7d, 0x86, 0x8f, 0x73, 0x0f, 0xe1, 0xdd, 0x85, 0x7d,
    0x05, 0x7d, 0x85, 0x83, 0x87, 0x9c, 0x85, 0x33, 0x0d, 0xe2, 0x87, 0x19, 0x0f, 0x79, 0x85, 0x86, 0x37, 0x7d, 0xd7, 0xdd, 0xe9, 0x7d, 0xd7, 0x7d, 0x85, 0x79, 0x05, 0x7d, 0x0f, 0xe1, 0x87, 0x7e,
    0x23, 0x87, 0xf5, 0x79, 0x5f, 0xe3, 0x4b, 0x83, 0xa3, 0xa2, 0xae, 0x0e, 0x14, 0x7d, 0xde, 0x7e, 0x85, 0x7a, 0x85, 0xaf, 0xcd, 0x7d, 0x87, 0xa5, 0x87, 0x7d, 0xe1, 0x7d, 0x88, 0x7d, 0x15, 0x91,
    0x23, 0x7d, 0x87, 0x7c, 0x0d, 0x7a, 0x85, 0x87, 0x17, 0x7c, 0x85, 0x7d, 0xac, 0x80, 0xbb, 0x79, 0x84, 0x9b, 0x5b, 0xa5, 0xd7, 0x8f, 0x05, 0x0f, 0x85, 0x7e, 0x85, 0x80, 0x85, 0x98, 0xf5, 0x9d,
    0xa3, 0x1a, 0x0d, 0x19, 0x87, 0x7c, 0x85, 0x7d, 0x84, 0x7d, 0x85, 0x7e, 0xe7, 0x97, 0x0d, 0x0f, 0x85, 0x7b, 0xea, 0x7d, 0xad, 0x80, 0xad, 0x7d, 0xb7, 0xaf, 0x0d, 0x7d, 0xe9, 0x3d, 0x85, 0x7d,
    0x87, 0xb7, 0x23, 0x7d, 0xe7, 0xb7, 0xa3, 0x0c, 0x87, 0x7e, 0x85, 0xa5, 0x7d, 0x76, 0x35, 0xb9, 0x0d, 0x6f, 0x23, 0x7d, 0x87, 0x9b, 0x85, 0x0c, 0xe1, 0xa1, 0x0d, 0x7f, 0x87, 0x7d, 0x84, 0x7a,
    0x84, 0x7b, 0xe1, 0x86, 0xe8, 0x6f, 0xd1, 0x79, 0x85, 0x19, 0x53, 0x95, 0xc3, 0x47, 0x19, 0x7d, 0xe7, 0x0c, 0x37, 0x7c, 0x23, 0x7d, 0x85, 0x7d, 0x4b, 0x79, 0x21, 0xa5, 0x87, 0x7d, 0x19, 0x7d,
    0x0d, 0x7d, 0x15, 0x91, 0x23, 0x7d, 0x87, 0x7c, 0x85, 0x7a, 0x85, 0xaf, 0xcd, 0x7d, 0x87, 0x7d, 0xe9, 0x3d, 0x85, 0x7d, 0x15, 0x79, 0x85, 0x7d, 0xc1, 0x7b, 0xea, 0x7d, 0xb7, 0x7d, 0x85, 0x7d,
    0x85, 0x7d, 0x0d, 0x7d, 0xe9, 0x73, 0x85, 0x79, 0x05, 0x7d, 0xd7, 0x7d, 0x85, 0xe1, 0xb9, 0xe1, 0x0f, 0x65, 0x85, 0x86, 0x2d, 0x7d, 0xd7, 0xdd, 0xa3, 0x8e, 0xe6, 0x7d, 0xde, 0x7e, 0xae, 0x0e,
    0x0f, 0xe1, 0x89, 0x7e, 0x23, 0x7d, 0xf5, 0x79, 0x23, 0xe1, 0x4b, 0x83, 0x0c, 0x0f, 0x85, 0x7b, 0x85, 0x7e, 0x8f, 0x80, 0x85, 0x98, 0xf5, 0x7a, 0x85, 0x1a, 0x0d, 0xe1, 0x0f, 0x7c, 0x89, 0x0c,
    0x85, 0x0b, 0x23, 0x69, 0x87, 0x7b, 0x23, 0x0c, 0x1f, 0xb7, 0x21, 0x7a, 0x88, 0x7e, 0x8f, 0xa5, 0x7d, 0x80, 0xb7, 0xb9, 0x18, 0xbf, 0x4b, 0x19, 0x85, 0xa5, 0x91, 0x80, 0x87, 0x81, 0x87, 0x7c,
    0x0f, 0x73, 0x91, 0x91, 0x84, 0x87, 0x37, 0xd7, 0x86, 0x79, 0xe1, 0xdd, 0x85, 0x7a, 0x73, 0x9b, 0x05, 0x7d, 0x0d, 0x83, 0x87, 0x9c, 0x85, 0x33, 0x87, 0x7d, 0x85, 0x0f, 0x87, 0x7d, 0x0d, 0x7d,
    0xf6, 0x7e, 0x87, 0x7d, 0x88, 0x19, 0x89, 0xf5, 0xd1, 0xdd, 0x85, 0x7d, 0x8b, 0xc3, 0xea, 0x7a, 0xd7, 0xb0, 0x0d, 0x7d, 0x87, 0xa5, 0x87, 0x7c, 0x73, 0x7e, 0x7d, 0x86, 0x87, 0x23, 0x85, 0x10,
    0xd7, 0xdf, 0xed, 0xa5, 0xe1, 0x7a, 0x85, 0x23, 0xea, 0x7e, 0x85, 0x98, 0xad, 0x79, 0x86, 0x7d, 0x85, 0x7d, 0xd7, 0x7d, 0xe1, 0x7a, 0xf5, 0x7d, 0x85, 0xb0, 0x2b, 0x37, 0xe1, 0x7a, 0x87, 0x79,
    0x84, 0x7d, 0x73, 0x73, 0x87, 0x7d, 0x23, 0x7d, 0xe9, 0x7d, 0x85, 0x7e, 0x02, 0x7d, 0xdd, 0x2d, 0x87, 0x79, 0xe7, 0x79, 0xad, 0x7c, 0x23, 0xda, 0x87, 0x0d, 0x0d, 0x7b, 0xe7, 0x79, 0x9b, 0x7d,
    0xd7, 0x8f, 0x05, 0x7d, 0x0d, 0x34, 0x8f, 0x7d, 0xad, 0x87, 0xe9, 0x7c, 0x85, 0x80, 0x85, 0x79, 0x8a, 0xc3, 0xe7, 0xa5, 0xe8, 0x6b, 0x0d, 0x74, 0x10, 0x73, 0x33, 0x17, 0x0d, 0x37, 0x21, 0x19
};

        /// <summary>
        /// Decrypts the packet data.
        /// </summary>
        /// <param name="pBuffer">Pointer to the packet buffer.</param>
        /// <param name="offset">Offset where the packet starts in the buffer.</param>
        /// <returns>If the decryption succeeds.</returns>
        public static unsafe bool Decrypt(byte[] pBuffer, int offset = 0)
        {
            fixed (byte* pBufferPin = pBuffer)
            {
                uint keyIncrement = keyTable[(pBufferPin[2 + offset] * 2)];
                uint keyResult = 0;
                byte checksumEnc = 0;
                byte checksumDec = 0;
                bool sucessfull = true;

                for (int i = 4, thisIterator = 0; i < *(ushort*)&pBufferPin[offset];
                     i++, keyIncrement++)
                {
                    checksumEnc += pBufferPin[i + offset];

                    keyResult = keyTable[((keyIncrement & 0x800000FF) * 2) + 1];

                    thisIterator = i & 3;

                    switch (thisIterator)
                    {
                        case 0:
                            pBufferPin[i + offset] -= (byte)(keyResult << 1);
                            break;

                        case 1:
                            pBufferPin[i + offset] += (byte)((int)(keyResult) >> 3);
                            break;

                        case 2:
                            pBufferPin[i + offset] -= (byte)(keyResult << 2);
                            break;

                        case 3:
                            pBufferPin[i + offset] += (byte)((int)keyResult >> 5);
                            break;
                    }

                    checksumDec += pBufferPin[i + offset];
                }

                // Do checksum
                if (pBufferPin[3 + offset] != (byte)(checksumEnc - checksumDec)) // Old checksum
                                                                                 //if (pBufferPin[3 + offset] != (byte)(checksumDec))
                {
                    sucessfull = false;
                }

                return sucessfull;
            }
        }

        public static bool Decrypt(CCompoundBuffer buffer)
        {
            return Decrypt(buffer.RawBuffer, buffer.Offset);
        }

        /// <summary>
        /// Encrypts the packet data and initialize the packet header.
        /// </summary>
        /// <param name="pBuffer">Pointer to the packet buffer.</param>
        /// <param name="offset">Offset where the packet starts in the buffer.</param>
        public static unsafe void Encrypt(byte[] pBuffer, int offset = 0)
        {
            fixed (byte* pBufferPin = pBuffer)
            {
                byte checksumEnc = 0;
                byte checksumDec = 0;
                byte keyResult = 0;

                MSG_HEADER* pHeader = (MSG_HEADER*)pBufferPin;

                uint keyIncrement = (uint)(keyTable[pHeader->Key * 2] & 0xFF);

                for (uint i = 4, loopIterator = 0; i < pHeader->Size; i++, keyIncrement++)
                {
                    checksumDec += pBufferPin[offset + i];

                    keyResult = keyTable[((keyIncrement & 0x800000FF) * 2) + 1];

                    loopIterator = i & 3;

                    switch (loopIterator)
                    {
                        case 0:
                            pBufferPin[offset + i] += (byte)(keyResult * 2);
                            break;

                        case 1:
                            pBufferPin[offset + i] -= (byte)((int)keyResult >> 3);
                            break;

                        case 2:
                            pBufferPin[offset + i] += (byte)(keyResult * 4);
                            break;

                        case 3:
                            pBufferPin[offset + i] -= (byte)((int)keyResult >> 5);
                            break;
                    }

                    checksumEnc += pBufferPin[offset + i];
                }

                //pBufferPin[offset + 3] = (byte)(checksumDec); // Fixed checksum
                pHeader->CheckSum = (byte)(checksumEnc - checksumDec); // Old checksum
            }
        }

        public static void Encrypt(CCompoundBuffer buffer)
        {
            Encrypt(buffer.RawBuffer, buffer.Offset);
        }
    }
}